// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Support API",
            "email": "support@authservice.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/forgot-password": {
            "post": {
                "description": "Envoie un email pour réinitialiser le mot de passe d'un utilisateur",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentification"
                ],
                "summary": "Réinitialisation du mot de passe",
                "parameters": [
                    {
                        "description": "Informations de l'utilisateur",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email envoyé avec succès",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Email invalide",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Permet à un utilisateur de se connecter en utilisant son email et mot de passe",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentification"
                ],
                "summary": "Connexion utilisateur",
                "parameters": [
                    {
                        "description": "Informations de connexion",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Jeton JWT généré",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Paramètres invalides",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Non autorisé",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login-google": {
            "get": {
                "description": "Authentifie un utilisateur via Google OAuth2",
                "tags": [
                    "Authentification"
                ],
                "summary": "Connexion via Google",
                "responses": {
                    "302": {
                        "description": "Redirection vers Google Auth",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Déconnecte l'utilisateur actuel",
                "tags": [
                    "Authentification"
                ],
                "summary": "Déconnexion utilisateur",
                "responses": {
                    "200": {
                        "description": "Déconnexion réussie",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Non autorisé",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oauth2/callback": {
            "get": {
                "description": "Traite le retour de Google après l'authentification OAuth2",
                "tags": [
                    "Authentification"
                ],
                "summary": "Callback Google Auth",
                "responses": {
                    "200": {
                        "description": "Informations utilisateur",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Code ou état invalide",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Crée un compte utilisateur avec email et mot de passe",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentification"
                ],
                "summary": "Inscription utilisateur",
                "parameters": [
                    {
                        "description": "Informations de l'utilisateur",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Inscription réussie",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Requête invalide",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflit - Utilisateur déjà existant",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "description": "Permet de réinitialiser un mot de passe via un jeton",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentification"
                ],
                "summary": "Réinitialisation de mot de passe",
                "parameters": [
                    {
                        "description": "Informations de l'utilisateur",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mot de passe réinitialisé avec succès",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Paramètres invalides",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/validate-token": {
            "get": {
                "description": "Vérifie si le token JWT est valide",
                "tags": [
                    "Authentification"
                ],
                "summary": "Validation du token JWT",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Token invalide",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ForgotPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "AuthService API",
	Description:      "API de gestion de l'authentification pour Bing Photo",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
